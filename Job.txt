try {
	var conn = $.db.getConnection();
	var filename = $.request.parameters.get("filename");
	var batch = $.request.parameters.get("batch");
	var schemaname = $.request.parameters.get("schemaname");
	var tablename = $.request.parameters.get("tablename");
	var proc = $.request.parameters.get("process");
	var emptyisnull = $.request.parameters.get("nulls");
	var delrows = $.request.parameters.get("delete");
	var csvpreviewrow = $.request.parameters.get("csvpreviewrow");
	var delimeter = $.request.parameters.get("delimeter");

	var contents = "";
	var html = "";
	var response = {};
	var messages = [];

	contents = $.request.body.asString();
	uploadFile();

} catch (err) {
	if (contents === "") {
		messages.push("No records sent");
	} else {
		messages.push(err.message);
	}

	$.response.status = $.net.http.BAD_REQUEST;
} finally {
	response.Result = messages;
	$.response.contentType = "application/json";
	$.response.setBody(JSON.stringify(response));
}

function checkForBadData(arrLines) {
	for (var i = 0; i < arrLines.length; i++) {
		if (JSON.stringify(arrLines[i]).length <= 2) {
			arrLines.splice(i, 1);
			checkForBadData(arrLines);
		}
	}
	return arrLines;
}

function uploadFile() {
	try {
		//Query Tabe metadata and get the content type of each column
		var pstmt = conn.prepareStatement('SELECT * FROM "' + schemaname + '"."' + tablename + '" LIMIT 1');
		var rs = pstmt.executeQuery();
		var rsm = rs.getMetaData();
		var colCount = rsm.getColumnCount();
		var startdt = Date.now(); // A BORRAR LUEGO

		var arrLines = contents.split(/\r\n|\n/);
		var placeholder = new Array(colCount + 1).join('?').split('').join(',');

		var insertStmnt = 'UPSERT "' + schemaname + '"."' + tablename + '" VALUES (' + placeholder + ') WITH PRIMARY KEY';
		//var insertStmnt = 'INSERT INTO "' + schemaname + '"."' + tablename + '" VALUES (' + placeholder + ')';

		pstmt = conn.prepareStatement(insertStmnt);

		arrLines = checkForBadData(arrLines);

		if (batch === "on") {
			pstmt.setBatchSize(arrLines.length);
		}

		for (var i = 0; i < arrLines.length; i++) {
			var line = arrLines[i].split(delimeter);
			//var col = line.splice(0, arrLines.length + 1);
			var col = line.splice(0, colCount);
			if (JSON.stringify(arrLines[i]).length > 2) {
				for (var a = 1; a <= colCount; a++) {
					var val = "";
					if (typeof col[a - 1] === 'undefined') {
						val = "";
					} else {
						val = col[a - 1].split(delimeter).join("");
						//val = val.replace("\\,", ",");
					}
					if (typeof val === "undefined" || (val === "" && emptyisnull === "on") || (val.toLowerCase() === "null" && emptyisnull === "on")) {
						pstmt.setNull(a);
					} else {
						switch (rsm.getColumnType(a)) {
							case $.db.types.VARCHAR:
							case $.db.types.CHAR:
								pstmt.setString(a, val);
								break;
							case $.db.types.NVARCHAR:
							case $.db.types.NCHAR:
							case $.db.types.SHORTTEXT:
								pstmt.setNString(a, val);
								break;
							case $.db.types.TINYINT:
							case $.db.types.SMALLINT:
							case $.db.types.INT:
							case $.db.types.BIGINT:
								pstmt.setInteger(a, parseInt(val));
								break;
							case $.db.types.DOUBLE:
								pstmt.setDouble(a, val);
								break;
							case $.db.types.DECIMAL:
								pstmt.setDecimal(a, val);
								break;
							case $.db.types.REAL:
								pstmt.setReal(a, val);
								break;
							case $.db.types.NCLOB:
							case $.db.types.TEXT:
								pstmt.setNClob(a, val);
								break;
							case $.db.types.CLOB:
								pstmt.setClob(a, val);
								break;
							case $.db.types.BLOB:
								pstmt.setBlob(a, val);
								break;
							case $.db.types.DATE:
								pstmt.setDate(a, val);
								break;
							case $.db.types.TIME:
								pstmt.setTime(a, val);
								break;
							case $.db.types.TIMESTAMP:
								pstmt.setTimestamp(a, val);
								break;
							case $.db.types.SECONDDATE:
								pstmt.setSeconddate(a, val);
								break;
							default:
								pstmt.setString(a, val);
								break;
						}
					}
				}

				if (batch === "on") {
					pstmt.addBatch();
				} else {
					pstmt.executeUpdate();
					conn.commit();
				}
			}
		}
		if (batch === "on") {
			pstmt.executeBatch();
			conn.commit();
		}

		$.response.status = $.net.http.OK;
		messages.push(arrLines.length + " Lines inserted");
		messages.push(((Date.now() - startdt) / 60).toFixed(2) + " Seconds taken to complete");

	} catch (err) {
		$.response.status = $.net.http.BAD_REQUEST;
		messages.push(err.message + ": Error in line - " + i + " and column " + a);
	} finally {
		pstmt.close();
		conn.commit();
		conn.close();
	}
}
