/*
XSJS service that allows to upsert records directly to a table on HANA database.

Records are sent like a flat file using a separator or delimiter (one record per line)

PARAMETERS:

-batch: Insert all records at the same time with value on
-schema: Name of the database schema (mandatory)
-tablename: Name of the database table (mandatory)
-delimiter: Separator used between fields of the table (mandatory)
-nulls: Insert null value if fields are empty (value on)

FORMAT:

id15,19000101,99991231,AUTHOR1,20180522180910,3,txt,txt
id17,1900-01-01,9999-12-31,AUTHOR1,2017-11-22T21:09:27,3,txt,txt

*/

function checkForBadData(arrLines) {
	for (var i = 0; i < arrLines.length; i++) {
		if (JSON.stringify(arrLines[i]).length <= 2) {
			arrLines.splice(i, 1);
			checkForBadData(arrLines);
		}
	}
	return arrLines;
}

String.prototype.splitCSV = function(sep) {
	for (var foo = this.split(sep = sep || ","), x = foo.length - 1, tl; x >= 0; x--) {
		if (foo[x].replace(/"\s+$/, '"').charAt(foo[x].length - 1) == '"') {
			if ((tl = foo[x].replace(/^\s+"/, '"')).length > 1 && tl.charAt(0) == '"') {
				foo[x] = foo[x].replace(/^\s*"|"\s*$/g, '').replace(/""/g, '"');
			} else if (x) {
				foo.splice(x - 1, 2, [foo[x - 1], foo[x]].join(sep));
			} else foo = foo.shift().split(sep).concat(foo);
		} else foo[x].replace(/""/g, '"');
	}
	return foo;
};

function addFieldStatement(p_stmt, p_meta, p_val, p_col) {

	var val = "";
	var p_null = "on";

	if (typeof p_val === 'undefined') {
		val = "";
	} else {
		val = p_val;
	}

	if (typeof val === "undefined" || (val === "" && p_null === "on") || (val.toLowerCase() === "null" && p_null === "on")) {
		p_stmt.setNull(p_col);
	} else {
		switch (p_meta.getColumnType(p_col)) {
			case $.db.types.VARCHAR:
			case $.db.types.CHAR:
				p_stmt.setString(p_col, val);
				break;
			case $.db.types.NVARCHAR:
			case $.db.types.NCHAR:
			case $.db.types.SHORTTEXT:
				p_stmt.setNString(p_col, val);
				break;
			case $.db.types.TINYINT:
			case $.db.types.SMALLINT:
			case $.db.types.INT:
			case $.db.types.BIGINT:
				p_stmt.setInteger(p_col, parseInt(val, 10));
				break;
			case $.db.types.DOUBLE:
				p_stmt.setDouble(p_col, val);
				break;
			case $.db.types.DECIMAL:
				p_stmt.setDecimal(p_col, val);
				break;
			case $.db.types.REAL:
				p_stmt.setReal(p_col, val);
				break;
			case $.db.types.NCLOB:
			case $.db.types.TEXT:
				p_stmt.setNClob(p_col, val);
				break;
			case $.db.types.CLOB:
				p_stmt.setClob(p_col, val);
				break;
			case $.db.types.BLOB:
				p_stmt.setBlob(p_col, val);
				break;
			case $.db.types.DATE:
				p_stmt.setDate(p_col, val);
				break;
			case $.db.types.TIME:
				p_stmt.setTime(p_col, val);
				break;
			case $.db.types.TIMESTAMP:
				p_stmt.setTimestamp(p_col, val);
				break;
			case $.db.types.SECONDDATE:
				p_stmt.setSeconddate(p_col, val);
				break;
			default:
				p_stmt.setString(p_col, val);
				break;
		}
	}
}

function uploadData(p_con, p_body, p_msg) {
	try {

		//Get pending parameters
		var batch = $.request.parameters.get("batch");
		var schemaname = $.request.parameters.get("schemaname");
		var tablename = $.request.parameters.get("tablename");
		//var emptyisnull = $.request.parameters.get("nulls");
		var delimiter = $.request.parameters.get("delimeter");

		//Query Tabe metadata and get the content type of each column
		var pstmt = p_con.prepareStatement('SELECT * FROM "' + schemaname + '"."' + tablename + '" LIMIT 1');
		var rs = pstmt.executeQuery();
		var rsm = rs.getMetaData();
		var colCount = rsm.getColumnCount();

		//Start date for time processing
		var startdt = Date.now();

		var arrLines = p_body.split(/\r\n|\n/);
		var placeholder = new Array(colCount + 1).join('?').split('').join(',');

		var insertStmnt = 'UPSERT "' + schemaname + '"."' + tablename + '" VALUES (' + placeholder + ') WITH PRIMARY KEY';
		//var insertStmnt = 'INSERT INTO "' + schemaname + '"."' + tablename + '" VALUES (' + placeholder + ')';

		pstmt = p_con.prepareStatement(insertStmnt);

		arrLines = checkForBadData(arrLines);

		if (batch === "on") {
			pstmt.setBatchSize(arrLines.length);
		}

		for (var i = 0; i < arrLines.length; i++) {
			var line = arrLines[i].splitCSV(delimiter);

			for (var j = 1; j <= colCount; j++) {
				addFieldStatement(pstmt, rsm, line[j - 1], j);
			}

			if (batch === "on") {
				pstmt.addBatch();
			} else {
				pstmt.executeUpdate();
				p_con.commit();
			}
		}

		if (batch === "on") {
			pstmt.executeBatch();
			p_con.commit();
		}

		$.response.status = $.net.http.OK;
		p_msg.push(arrLines.length + " Lines inserted");
		p_msg.push(((Date.now() - startdt) / 60).toFixed(2) + " Seconds taken to complete");

	} catch (err) {
		$.response.status = $.net.http.BAD_REQUEST;
		p_msg.push(err.message + ": Error in line - " + i + " and column " + j);
	} finally {
		pstmt.close();
		p_con.commit();
		p_con.close();
	}
}

try {

	var conn = $.db.getConnection();

	var contents = "";
	var response = {};
	var messages = [];

	contents = $.request.body.asString();

	uploadData(conn, contents, messages);

} catch (err) {
	if (contents === "") {
		messages.push("No records sent");
	} else {
		messages.push(err.message);
	}

	$.response.status = $.net.http.BAD_REQUEST;
} finally {
	response.Result = messages;
	$.response.contentType = "application/json";
	$.response.setBody(JSON.stringify(response));
}
