/*
XSJS service that allows to delete records directly to a table on HANA database.

Records are sent like a flat file using a separator or delimiter (one record per line)

PARAMETERS:

-batch: Insert all records at the same time with value on (optional)
-schemaname: Name of the database schema (mandatory)
-tablename: Name of the database table (mandatory)
-delimiter: Separator used between fields of the table (mandatory)
-pk : Determine number of primary keys used for deleting from 1 to pk (optional) . By default all

FORMAT:

id15,19000101,99991231,AUTHOR1,20180522180910,3,txt,txt
id17,1900-01-01,9999-12-31,AUTHOR1,2017-11-22T21:09:27,3,txt,txt
id19,1900-01-01,9999-12-31,AUTHOR1,2017-11-22T21:09:27,3,txt,"txt, es un texto"

*/

String.prototype.splitCSV = function(sep) {
	//function splitCSV(sep) {
	for (var foo = this.split(sep = sep || ","), x = foo.length - 1, tl; x >= 0; x--) {
		if (foo[x].replace(/"\s+$/, '"').charAt(foo[x].length - 1) === '"') {
			if ((tl = foo[x].replace(/^\s+"/, '"')).length > 1 && tl.charAt(0) === '"') {
				foo[x] = foo[x].replace(/^\s*"|"\s*$/g, '').replace(/""/g, '"');
			} else if (x) {
				foo.splice(x - 1, 2, [foo[x - 1], foo[x]].join(sep));
			} else {
				foo = foo.shift().split(sep).concat(foo);
			}
		} else {
			foo[x].replace(/""/g, '"');
		}
	}
	return foo;
};

function checkN(pmetad, pc) {
	//Check numeric data types

	var check = '';

	switch (pmetad.getColumnType(pc)) {
		case $.db.types.INT:
			check = "X";
			break;
		case $.db.types.BIGINT:
			check = "X";
			break;
		case $.db.types.DOUBLE:
			check = "X";
			break;
		case $.db.types.DECIMAL:
			check = "X";
			break;
		default:
			check = "";
			break;
	}

	return check;
}

function addFieldStatement(pstmt, pmeta, pval, pcol, pnull) {

	if ((typeof pval === 'undefined' || pval.toLowerCase() === "null" || pval === "") && (checkN(pmeta, pcol) === "X" || pnull === "on")) {

		switch (pmeta.getColumnType(pcol)) {
			case $.db.types.INT:
				pstmt.setInteger(pcol, parseInt(0, 10));
				break;
			case $.db.types.BIGINT:
				pstmt.setInteger(pcol, parseInt(0, 10));
				break;
			case $.db.types.DOUBLE:
				pstmt.setDouble(pcol, 0);
				break;
			case $.db.types.DECIMAL:
				pstmt.setDecimal(pcol, 0);
				break;
			default:
				pstmt.setNull(pcol); //pending data types
				break;
		}

	} else {

		if (typeof pval === 'undefined' || pval.toLowerCase() === "null") {
			pval = "";
		}

		switch (pmeta.getColumnType(pcol)) {
			case $.db.types.VARCHAR:
				/*case $.db.types.CHAR:
				pstmt.setString(pcol, val);
				break;
			case $.db.types.NVARCHAR:
			case $.db.types.NCHAR:
			case $.db.types.SHORTTEXT:
				pstmt.setNString(pcol, val);
				break;
			case $.db.types.TINYINT:
			case $.db.types.SMALLINT:
			case $.db.types.INT:
			case $.db.types.BIGINT:
				pstmt.setInteger(pcol, parseInt(val, 10));
				break;
			case $.db.types.DOUBLE:
				pstmt.setDouble(pcol, val);
				break;
			case $.db.types.DECIMAL:
				pstmt.setDecimal(pcol, val);
				break;
			case $.db.types.REAL:
				pstmt.setReal(pcol, val);
				break;
			case $.db.types.NCLOB:
			case $.db.types.TEXT:
				pstmt.setNClob(pcol, val);
				break;
			case $.db.types.CLOB:
				pstmt.setClob(pcol, val);
				break;
			case $.db.types.BLOB:
				pstmt.setBlob(pcol, val);
				break;*/
			case $.db.types.DATE:
				//pstmt.setString(pcol, pval);
				pstmt.setDate(pcol, pval);
				break;
			case $.db.types.TIME:
				pstmt.setTime(pcol, pval);
				break;
			case $.db.types.TIMESTAMP:
				pstmt.setTimestamp(pcol, pval);
				break;
			case $.db.types.SECONDDATE:
				pstmt.setSeconddate(pcol, pval);
				break;
			default:
				pstmt.setString(pcol, pval);
				break;
		}
	}
}

function getKeys(pdb, pschema, ptable) {
	var pk = $.request.headers.get("pk");
	var pos = 0;
	var num = 10;
	var str = '';

	//If parameter was not sent we determined max number of primary keys	
	if (typeof pk === 'undefined') {
		num = 10;
	} else {
		num = pk;
	}

	var stmtkey = 'SELECT "COLUMN_NAME" FROM "SYS"."CONSTRAINTS" WHERE "SCHEMA_NAME" = ';
	stmtkey = stmtkey + "'" + pschema + "'" + ' AND "TABLE_NAME" = ' + "'" + ptable + "'" + ' ORDER BY "POSITION"';

	var pstmt1 = pdb.prepareStatement(stmtkey);
	var rs1 = pstmt1.executeQuery();

	while (rs1.next()) {
	    pos =  pos + 1;
		if (num >= pos) {
			if (str === '') {
				str = 'WHERE "' + rs1.getString(1) + '" = ?';
			} else {
				str = str + ' AND "' + rs1.getString(1) + '" = ?';
			}
		}
	}

	return str;
}

function deleteData(pcon, pbody, pmsg) {
	try {

		//Get pending parameters
		var batch = $.request.headers.get("batch");
		var schemaname = $.request.headers.get("schemaname");
		var tablename = $.request.headers.get("tablename");
		var emptyisnull = $.request.headers.get("nulls");
		var delimiter = $.request.headers.get("delimiter");

		//Query Table metadata and get the content type of each column
		var pstmt = pcon.prepareStatement('SELECT * FROM "' + schemaname + '"."' + tablename + '" LIMIT 1');
		var rs = pstmt.executeQuery();
		var rsm = rs.getMetaData();

		//Start date for time processing
		var startdt = Date.now();

		var arrLines = pbody.split(/\r\n|\n/);

		var insertStmnt = 'DELETE FROM "' + schemaname + '"."' + tablename + '" ' + getKeys(pcon, schemaname, tablename);
		pmsg.push(insertStmnt);
		pstmt = pcon.prepareStatement(insertStmnt);

		//Get parameters of statement
		var numparam = pstmt.getParameterMetaData().getParameterCount();

		if (batch === "on") {
			pstmt.setBatchSize(arrLines.length);
		}

		for (var i = 0; i < arrLines.length; i++) {
			var line = arrLines[i].splitCSV(delimiter);

			for (var j = 1; j <= numparam; j++) {
				addFieldStatement(pstmt, rsm, line[j - 1], j, emptyisnull);
			}

			if (batch === "on") {
				pstmt.addBatch();
			} else {
				pstmt.executeUpdate();
				pcon.commit();
			}
		}

		if (batch === "on") {
			pstmt.executeBatch();
			pcon.commit();
		}

		$.response.status = $.net.http.OK;
		pmsg.push(arrLines.length + " Lines deleted");
		pmsg.push(((Date.now() - startdt) / 60).toFixed(2) + " Seconds taken to complete");

	} catch (err) {
		$.response.status = $.net.http.BAD_REQUEST;
		pmsg.push(err.message + ": Error in line - " + (i + 1) + " and column " + j);
	} finally {
		pstmt.close();
		pcon.commit();
		pcon.close();
	}
}

try {

	var conn = $.db.getConnection();

	var contents = "";
	var response = {};
	var messages = [];

	contents = $.request.body.asString();

	switch ($.request.method) {
		//Handle DELETE
		case $.net.http.DEL:

			// check Adittional authentication key
			var sKeyValue = $.request.headers.get("WORD");

			if (sKeyValue === 'MzE0MTU5Mg==') {
				deleteData(conn, contents, messages);
			} else {
				$.response.status = $.net.http.INTERNAL_SERVER_ERROR;
				messages.push("Authentication failed");
			}

			break;
			//Handle your other methods
		default:
			$.response.status = $.net.http.METHOD_NOT_ALLOWED;
			messages.push("REST method not allowed");
			break;
	}

} catch (err) {
	if (contents === "") {
		messages.push("No records sent");
	} else {
		messages.push(err.message);
	}

	$.response.status = $.net.http.BAD_REQUEST;
} finally {
	response.Result = messages;
	$.response.contentType = "application/json";
	$.response.setBody(JSON.stringify(response));
}
